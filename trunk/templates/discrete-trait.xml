<beast version='2.0'
       namespace='beast.app.beauti:beast.core:beast.evolution.branchratemodel:beast.evolution.speciation:beast.evolution.Tree.t:coalescent:beast.core.util:beast.evolution.nuc:beast.evolution.operators:beast.evolution.sitemodel:beast.evolution.substitutionmodel:beast.evolution.likelihood:beast.evolution:beast.math.distributions'>


<mergewith point='aux-partitions-panels'>
		<alignmentProvider id="Add Continuous Geography" spec='BeautiLocationTraitProvider' template='@LocationTrait'/>
		<alignmentProvider id="Add Discrete Trait" spec='BeautiDiscreteTraitProvider' template='@DiscreteTrait'/>
<!--
		<panel spec='BeautiPanelConfig' panelname="Discrete Trait" tiptext="Discrete Trait details"
            path='distribution/distribution[id="prior"]/distribution[id="discrete-trait"]/distribution'
            hasPartitions="none" icon='9.pngx' forceExpansion='TRUE'
            isVisible='true' type='beast.evolution.likelihood.AncestralStateTreeLikelihood'
        />
</mergewith>


<mergewith point='aux-partitiontemplate'>
-->
        <subtemplate id='DiscreteTrait' class='beast.evolution.alignment.AlignmentFromTrait' mainid='$(n)'
suppressInputs='beast.evolution.substitutionmodel.SVSGeneralSubstitutionModel.rates,
				beast.evolution.substitutionmodel.SVSGeneralSubstitutionModel.rateIndicator,
				beast.evolution.substitutionmodel.SVSGeneralSubstitutionModel.eigenSystem,
				beast.evolution.substitutionmodel.SVSGeneralSubstitutionModel.frequencies'>
<![CDATA[
        <!--distribution spec="CompoundDistribution" id="discrete-trait.$(n)" ignore="true"-->
			<distribution id="traitedtreeLikelihood.$(n)" spec='AncestralStateTreeLikelihood' useJava="true" tag="location" tree='@Tree.t:$(n)'> 
				<data spec="beast.evolution.alignment.AlignmentFromTrait" id='$(n)'>
					<userDataType spec='beast.evolution.datatype.UserDataType' id='traitDataType.$(n)' 
						states='4'
						codelength='-1'
						codeMap='A = 0, B = 1, C = 2, D = 3, ? = 0 1 2 3, - = 0 1 2 3'/>
<!--
					<traitSet id='traitset.$(n)' spec='beast.evolution.tree.TraitSet' traitname='discrete' value="">
						<taxa spec='beast.evolution.alignment.TaxonSet' alignment='@$(n)'/>

					</traitSet>
-->
				</data>
				<siteModel spec='SiteModel' id="geoSiteModel.s:$(n)" gammaCategoryCount='1'>
				        <proportionInvariant spec='parameter.RealParameter' id='proportionInvariant.s:$(n)' value='0.0' lower='0' upper='1' estimate='false'/>
				        <mutationRate        spec='parameter.RealParameter' id='mutationRate.s:$(n)' value='1.0'        estimate='false'/>
				        <shape               spec='parameter.RealParameter' id='gammaShape.s:$(n)' value='1.0'         estimate='false'/>
					<substModel spec="SVSGeneralSubstitutionModel" id="svs.s:$(n)">
						<rateIndicator id='rateIndicator.s:$(n)' spec='parameter.BooleanParameter' value='1.' dimension='6'/>
					    <frequencies id='traitfreqs.s:$(n)' spec='Frequencies'>
					            <frequencies id='traitfrequencies.s:$(n)' spec='parameter.RealParameter' value='.25 .25 .25 .25'/>
					    </frequencies>
					    <rates id='relativeGeoRates.s:$(n)' spec='parameter.RealParameter' value='1.' dimension='6'/>
					</substModel>
				</siteModel>
				<branchRateModel id="StrictClockModel.c:$(n)" spec="beast.evolution.branchratemodel.StrictClockModel">
					<parameter id="traitClockRate.c:$(n)" name="clock.rate" value="1.0"/>
				</branchRateModel>
			</distribution>
        <!--/distribution-->

		<logger id='treeWithTraitLogger.$(n)' logEvery="10000" fileName="$(n)_tree_with_trait.$(seed).trees" mode="tree">
			<log spec='beast.evolution.tree.TreeWithTraitLogger' tree='@Tree.t:$(n)'>
				<metadata idref="posterior"/>
				<metadata idref="traitedtreeLikelihood.$(n)"/>
			</log>
		</logger>

		<ParameterCumSum spec="beast.core.util.Sum" id="nonZeroRates.s:$(n)" arg="@rateIndicator.s:$(n)"/> 


		<distribution  id='geoclockPrior.c:$(n)' x="@traitClockRate.c:$(n)" spec='beast.math.distributions.Prior'>
			<distr spec='beast.math.distributions.Gamma' alpha="0.001" beta="1000." offset="0.0"/>
		</distribution>
		<distribution  id='relativeGeoRatesPrior.s:$(n)' x="@relativeGeoRates.s:$(n)" spec='beast.math.distributions.Prior'>
			<distr spec='beast.math.distributions.Gamma' alpha="1." beta="1." offset="0.0"/>
		</distribution>
		<distribution  id="nonZeroRatePrior.s:$(n)" x="@nonZeroRates.s:$(n)"  spec='beast.math.distributions.Prior'>
			<distr spec='beast.math.distributions.Poisson' lambda="0.693" offset="6.0"/>
		</distribution>


        <operator id='georateScaler.s:$(n)' spec='ScaleOperator' scaleFactor="0.99" weight="30" parameter="@relativeGeoRates.s:$(n)" scaleAllIndependently="true"/>
		<operator id="indicatorFlip.s:$(n)" spec="BitFlipOperator" parameter="@rateIndicator.s:$(n)" weight="30"/>

	 	<operator id='geoMuScaler.c:$(n)' spec='ScaleOperator' scaleFactor="0.9" weight="3" parameter="@traitClockRate.c:$(n)"/>  
		<operator id="BSSVSoperator.c:$(n)" spec="BitFlipBSSVSOperator" indicator="@rateIndicator.s:$(n)" mu="@traitClockRate.c:$(n)" weight="30"/>
]]>

         <connect srcID='traitedtreeLikelihood.$(n)'              targetID='likelihood' inputName='distribution' if="isInitializing"/>

         <connect srcID='geoclockPrior.c:$(n)'                    targetID='prior' inputName='distribution' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(traitClockRate.c:$(n)) and traitClockRate.c:$(n)/estimate=true'/>
         <connect srcID='relativeGeoRatesPrior.s:$(n)'            targetID='prior' inputName='distribution' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(relativeGeoRates.s:$(n)) and relativeGeoRates.s:$(n)/estimate=true'/>
         <connect srcID='nonZeroRatePrior.s:$(n)'                 targetID='prior' inputName='distribution' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(rateIndicator.s:$(n)) and rateIndicator.s:$(n)/estimate=true'/>

         <connect srcID='rateIndicator.s:$(n)'                    targetID='state' inputName='stateNode' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(rateIndicator.s:$(n)) and rateIndicator.s:$(n)/estimate=true'/>
         <connect srcID='relativeGeoRates.s:$(n)'                 targetID='state' inputName='stateNode' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(relativeGeoRates.s:$(n)) and relativeGeoRates.s:$(n)/estimate=true'/>
         <connect srcID='traitClockRate.c:$(n)'                   targetID='state' inputName='stateNode' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(traitClockRate.c:$(n)) and traitClockRate.c:$(n)/estimate=true'/>

         <connect srcID='georateScaler.s:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(relativeGeoRates.s:$(n)) and relativeGeoRates.s:$(n)/estimate=true'>Scales subst model rates of traits on partition $(n)</connect>
         <connect srcID='indicatorFlip.s:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(rateIndicator.s:$(n)) and rateIndicator.s:$(n)/estimate=true'>Flips indicator bits of traits on partition $(n)</connect>
         <connect srcID='geoMuScaler.c:$(n)'                      targetID='mcmc' inputName='operator' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(traitClockRate.c:$(n)) and traitClockRate.c:$(n)/estimate=true'>Scales migration rate of traits on partition $(n)</connect>
         <connect srcID='BSSVSoperator.c:$(n)'                    targetID='mcmc' inputName='operator' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(rateIndicator.s:$(n)) and rateIndicator.s:$(n)/estimate=true'>Flips indicator bits of traits on partition $(n)</connect>

         <!--connect srcID='traitedtreeLikelihood.$(n)'              targetID='tracelog' inputName='log' if='inposterior(traitedtreeLikelihood.$(n))'/-->
         <connect srcID='rateIndicator.s:$(n)'                    targetID='tracelog' inputName='log' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(rateIndicator.s:$(n)) and rateIndicator.s:$(n)/estimate=true'/>
         <connect srcID='relativeGeoRates.s:$(n)'                 targetID='tracelog' inputName='log' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(relativeGeoRates.s:$(n)) and relativeGeoRates.s:$(n)/estimate=true'/>
         <connect srcID='traitClockRate.c:$(n)'                   targetID='tracelog' inputName='log' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null and inlikelihood(traitClockRate.c:$(n)) and traitClockRate.c:$(n)/estimate=true'/>

         <connect srcID='treeWithTraitLogger.$(n)'                targetID='mcmc' inputName='logger' if='inposterior(traitedtreeLikelihood.$(n)) and $(n)/traitSet!=null'/>

<!--
<mergewith point='aux-priors'>
				<distribution spec="CompoundDistribution" id="discrete-trait">
				</distribution>
</mergewith>
-->
	</subtemplate>


        <subtemplate id='LocationTrait' class='beast.evolution.alignment.AlignmentFromTraitMap' mainid='$(n)'
suppressInputs='beast.evolution.substitutionmodel.LocationSubstitutionModel.frequencies'>
<![CDATA[
	<multivariateTraitLikelihood id="locationtreeLikelihood.$(n)" spec='beast.continuous.SampledMultivariateTraitLikelihood'
		useTreeLength="true" scaleByTime="true" reportAsMultivariate="true" reciprocalRates="true" tree='@Tree.t:$(n)'>
		<traitParameter id='location.$(n)' spec='parameter.RealParameter' value='0 0' minordimension='2'/>
	    <data spec='beast.evolution.alignment.AlignmentFromTraitMap' id='$(n)'>
			<userDataType spec='beast.evolution.datatype.LocationDataType'/>
			<traitMap id='traitmap.s:$(n)' spec='beast.evolution.tree.TreeTraitMap' tree='@Tree.t:$(n)' parameter='@location.$(n)' traitName='location' 
				randomizeupper="45 -70" randomizelower="28 -122">
			</traitMap>
		</data>
		<siteModel spec='SiteModel' id="geoContSiteModel.s:$(n)">
			<substModel id="diffusionModel.s:$(n)" spec='beast.continuous.MultivariateDiffusionModel'>
				<precisionMatrix spec='parameter.RealParameter' id='precisionMatrix.s:$(n)' minordimension='2'>
0.365 -1.78E-4
-1.78E-4 5.16E-2
				</precisionMatrix>
			</substModel>
		</siteModel>
        <branchRateModel spec='beast.evolution.branchratemodel.StrictClockModel' id='StrictClock.c:$(n)'>
            <clock.rate id='clockRate.c:$(n)' spec='parameter.RealParameter' value='1.0' estimate='false'/>
        </branchRateModel>
    </multivariateTraitLikelihood>

	<distribution  id="precisionPrior.$(n)" spec='beast.math.distributions.WishartDistribution' df='2' arg='@precisionMatrix.s:$(n)'>
		<scaleMatrix spec='parameter.RealParameter' minordimension='2'>
				1.0 0.0
				0.0 1.0
		</scaleMatrix>
	</distribution>

	<distribution id="rootPrior.$(n)" spec='beast.math.distributions.MultivariateNormalDistribution'>
		<arg id='rootTrait.$(n)' spec='beast.evolution.tree.RootTrait' traitmap='@traitmap.s:$(n)'/>
		<mean spec='parameter.RealParameter' value='0.0 0.0'/>
		<precision spec='parameter.RealParameter' minordimension='2'>
				0.001 0.0
				0.0   0.001
		</precision>
	</distribution>

    <log id='rateStat.$(n)' spec='beast.evolution.branchratemodel.RateStatistic' tree='@Tree.t:$(n)' treeLikelihood='@locationtreeLikelihood.$(n)'/>




    <plugin id='ClockPrior.c:$(n)' spec='beast.math.distributions.Prior' x='@clockRate.c:$(n)'>
        <distr spec="beast.math.distributions.Uniform" upper='Infinity'/>
    </plugin>

    <operator id='StrictClockRateScaler.c:$(n)' spec='ScaleOperator' scaleFactor="0.75" weight="3" parameter='@clockRate.c:$(n)'/>

    <operator id='precisionGibbsOperator.s:$(n)' spec='PrecisionMatrixGibbsOperator' tree='@Tree.t:$(n)' parameter='@precisionMatrix.s:$(n)' traitmap='@traitmap.s:$(n)'  weight="15">
	<likelihood idref='locationtreeLikelihood.$(n)'/>
	<prior idref='precisionPrior.$(n)'/>
    </operator>

    <operator id='traitGibbsOperator.$(n)' spec='TraitGibbsOperator' tree='@Tree.t:$(n)' precisionMatrix='@precisionMatrix.s:$(n)' traitmap='@traitmap.s:$(n)' weight="50">
		<likelihood idref='locationtreeLikelihood.$(n)'/>
    </operator>

    <operator id='RootTraitRandowWalkOperator.$(n)' spec='RootTraitRandowWalkOperator' windowSize="10.0" weight="5" parameter='@location.$(n)' traitmap='@traitmap.s:$(n)' />


]]>

         <connect srcID='locationtreeLikelihood.$(n)'      targetID='likelihood' inputName='distribution' if="isInitializing"/>


         <connect srcID='location.s:$(n)'                  targetID='state' inputName='stateNode' if='inlikelihood(location.s:$(n)) and location.s:$(n)/estimate=true'/>
         <connect srcID='precisionMatrix.s:$(n)'           targetID='state' inputName='stateNode' if='inlikelihood(precisionMatrix.s:$(n)) and precisionMatrix.s:$(n)/estimate=true'/>
         <connect srcID='clockRate.c:$(n)'                 targetID='state' inputName='stateNode' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>

         <connect srcID='precisionPrior.c:$(n)'            targetID='prior' inputName='distribution' if='inposterior(precisionMatrix.$(n)) and precisionMatrix.s:$(n)/estimate=true'/>
         <connect srcID='rootPrior.c:$(n)'                 targetID='prior' inputName='distribution' if='inposterior(location.$(n)) and location.s:$(n)/estimate=true'/>
         <connect srcID='ClockPrior.c:$(n)'                targetID='prior' inputName='distribution' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>


         <connect srcID='precisionGibbsOperator.s:$(n)'    targetID='mcmc' inputName='operator' if='inlikelihood(precisionMatrix.s:$(n)) and precisionMatrix.c:$(n)/estimate=true'>Move precision matrix of partition c:$(n)</connect>
         <connect srcID='traitGibbsOperator.$(n)'          targetID='mcmc' inputName='operator' if='inlikelihood(locationtreeLikelihood:$(n)) and location.s:$(n)/estimate=true'>Move location of partition c:$(n)</connect>
         <connect srcID='RootTraitRandowWalkOperator.$(n)' targetID='mcmc' inputName='operator' if='inlikelihood(locationtreeLikelihood:$(n)) and location.s:$(n)/estimate=true'>Move root location of partition c:$(n)</connect>
         <connect srcID='StrictClockRateScaler.c:$(n)'     targetID='mcmc' inputName='operator' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'>Scale clock rate of partition c:$(n)</connect>

         <connect srcID='locationtreeLikelihood:$(n)'      targetID='tracelog' inputName='log' if='inlikelihood(locationtreeLikelihood:$(n))'/>
         <connect srcID='precisionMatrix.s:$(n)'           targetID='tracelog' inputName='log' if='inlikelihood(precisionMatrix.s:$(n)) and precisionMatrix.s:$(n)/estimate=true'/>
         <connect srcID='rateState:$(n)'                   targetID='tracelog' inputName='log' if='inlikelihood(locationtreeLikelihood:$(n))'/>
         <connect srcID='clockRate.c:$(n)'                 targetID='tracelog' inputName='log' if='inlikelihood(clockRate.c:$(n)) and clockRate.c:$(n)/estimate=true'/>

	</subtemplate>
</mergewith>

</beast>

