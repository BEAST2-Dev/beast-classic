<beast version='2.0'
       namespace='beastfx.app.beauti:beast.pkgmgmt:beast.base.core:beast.base.inference:beast.base.evolution.branchratemodel:beast.base.evolution.speciation:beast.base.evolution.tree.coalescent:beast.base.util:beast.base.math:beast.evolution.nuc:beast.base.evolution.operator:beast.base.inference.operator:beast.base.evolution.sitemodel:beast.base.evolution.substitutionmodel:beast.base.evolution.likelihood:beast.evolution:beast.base.inference.distribution'>

    <!-- tree priors -->
    <mergewith point='treePriorTemplates'>

        <subtemplate id='SkyRideModel' class='beastclassic.evolution.tree.coalescent.GMRFSkyrideLikelihood' mainid='SkyRide.t:$(n)'
        	suppressInputs='
        		beastclassic.evolution.tree.coalescent.GMRFSkyrideLikelihood.tree,
	        	beastclassic.evolution.tree.coalescent.GMRFSkyrideLikelihood.treeIntervals,
	        	beastclassic.evolution.tree.coalescent.GMRFSkyrideLikelihood.lambda,
	        	beastclassic.evolution.tree.coalescent.GMRFSkyrideLikelihood.groupSizes'
        	>
            <![CDATA[
			<distribution id="SkyRide.t:$(n)" timeAwareSmoothing="true" spec='beastclassic.evolution.tree.coalescent.GMRFSkyrideLikelihood'>
				<populationSizes id="skyrideLogPopSize.t:$(n)" dimension="1" value="1.0"  spec='parameter.RealParameter'/>
				<groupSizes id="skyrideGroupSize.t:$(n)" dimension="1" spec='parameter.RealParameter' value='1'/>
				<precisionParameter id="skyridePrecision.t:$(n)" value="1.0" lower="0.0" spec='parameter.RealParameter'/>
		        <tree idref="Tree.t:$(n)"/>
			</distribution>

			<prior id='SkyRidePrecisionPrior.t:$(n)' name='distribution' x="@skyridePrecision.t:$(n)">
				<Gamma name='distr'>
                    <alpha spec="parameter.RealParameter" value="0.01" estimate="false"/> 
                    <beta  spec="parameter.RealParameter" value="100.0" estimate="false"/>
                </Gamma>
 			</prior>
			
    		<operator id="SkyRidePopSizeWalker.t:$(n)" scaleFactor="0.5" spec="kernel.BactrianRandomWalkOperator" parameter="@skyrideLogPopSize.t:$(n)" weight="3.0"/>
		    <operator id="SkyRideAdaptablePopSizeOperator.t:$(n)" spec="beast.base.evolution.operator.AdaptableOperatorSampler" weight="10.0">
		        <parameter idref="skyrideLogPopSize.t:$(n)"/>
		    	
				<operator id="SkyrideBlockUpdateOperator.t:$(n)" spec='beastclassic.evolution.operators.GMRFSkyrideBlockUpdateOperator' weight="3" scaleFactor="2.0" maxIterations="200" 
                                 stopValue="0.01" likelihood='@SkyRide.t:$(n)'/>
    			<operator id="SkyRidePrecisionScaler.t:$(n)" scaleFactor="0.5" spec="kernel.BactrianScaleOperator" parameter="@skyridePrecision.t:$(n)" weight="0.1"/>
				<operator id="SkyRideAVMNOperator.t:$(n)" spec="beast.base.evolution.operator.kernel.AdaptableVarianceMultivariateNormalOperator" weight="3.0" 
    	            coefficient="1.0"
        	        scaleFactor="1"
            	    beta="0.05"
                	initial="800"
	                burnin="400"
    	            every="1" allowNonsense="true">
        	        <transformations id="SkyRideLogTransform.t:$(n)" spec="beast.base.inference.operator.kernel.Transform$LogTransform">
            	            <f idref="skyridePrecision.t:$(n)"/>
                	</transformations>
	                <transformations id="SkyRideNoTransform.t:$(n)" spec="beast.base.inference.operator.kernel.Transform$NoTransform">
    	                    <f idref="skyrideLogPopSize.t:$(n)"/>
        	        </transformations>
	    		</operator>
    		</operator>
			]]>
			
			<plate fragment="TreeOperators" var="m" range="SkyRide"/>

            <connect srcID='SkyRide.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'>Sky Ride prior on tree t:$(n)
            </connect>
            <connect srcID='skyridePrecision.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n)) and inposterior(skyridePrecision.t:$(n)) and skyridePrecision.t:$(n)/estimate=true'/>
            <connect srcID='skyrideLogPopSize.t:$(n)' targetID='state' inputName='stateNode'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n))'/>
                     
            <connect srcID='skyridePrecision.t:$(n)' targetID='SkyRideLogTransform.t:$(n)' inputName='f'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n)) and inposterior(skyridePrecision.t:$(n)) and skyridePrecision.t:$(n)/estimate=true'/>
            <connect srcID='skyrideLogPopSize.t:$(n)' targetID='SkyRideNoTransform.t:$(n)' inputName='f'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n))'/>

            <connect srcID='SkyRidePrecisionPrior.t:$(n)' targetID='prior' inputName='distribution'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n)) and skyridePrecision.t:$(n)/estimate=true'>
                Sky Ride precision of partition t:$(n)
            </connect>
            
            <connect srcID='SkyRideAdaptablePopSizeOperator.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n))'>
                Adaptable update of Sky Ride parameters of tree t:$(n)
            </connect>
            <connect srcID='SkyRidePrecisionScaler.t:$(n)' targetID='mcmc' inputName='operator'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n)) and skyridePrecision.t:$(n)/estimate=true'>
                Scale precision of Sky Ride prior of tree t:$(n)
            </connect>

            <connect srcID='SkyRide.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n)) and Tree.t:$(n)/estimate=true'/>
            <connect srcID='skyridePrecision.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n)) and skyridePrecision.t:$(n)/estimate=true'/>
            <connect srcID='skyrideLogPopSize.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n))'/>
            <connect srcID='skyrideGroupSize.t:$(n)' targetID='tracelog' inputName='log'
                     if='inposterior(SkyRide.t:$(n)) and inposterior(Tree.t:$(n))'/>

        </subtemplate>

    </mergewith>
</beast>


